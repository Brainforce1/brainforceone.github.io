using Bvb.Framework.Contracts;
using Bvb.Framework.Contracts.Commands;
using NServiceBus;

namespace Bvb.Framework.Server.Commands;

/// <summary>
/// Interface for a command handler which returns a result. Contains the business logic of the command functionality of a domain
/// <see href="https://iris.bankvanbreda.be/display/AFDINF/Richtlijnen+ontwikkeling+in+FW+2.0">Overzicht van command implementatie</see>
/// </summary>
/// <typeparam name="TRequest">Input type for the request</typeparam>
/// <typeparam name="TResponse">Output type for the response</typeparam>
public interface ICommandHandler<TRequest, TResponse> : IHandleMessages<TRequest>, IRequestHandler<TRequest, TResponse>
    where TRequest : ICommand<TResponse>
{
}

public abstract class BaseCommandHandler<TRequest, TResponse> : ICommandHandler<TRequest, TResponse>
    where TRequest : ICommand<TResponse>
{
    public abstract Task<TResponse> Execute(TRequest request, CancellationToken cancellationToken);

    public async Task Handle(TRequest message, IMessageHandlerContext context)
    {
        await Execute(message, CancellationToken.None);
    }
}

/// <summary>
/// Interface for a command handler which does not return a result. Contains the business logic of the command functionality of a domain
/// <see href="https://iris.bankvanbreda.be/display/AFDINF/Richtlijnen+ontwikkeling+in+FW+2.0">Overzicht van command implementatie</see>
/// </summary>
/// <typeparam name="TRequest">Input type for the request</typeparam>
public interface ICommandHandler<TRequest> : ICommandHandler<TRequest, Unit>
    where TRequest : Contracts.Commands.ICommand
{
}

public abstract class BaseCommandHandler<TRequest> : ICommandHandler<TRequest>
    where TRequest : Contracts.Commands.ICommand
{
    public abstract Task Execute(TRequest request, CancellationToken cancellationToken);

    public async Task Handle(TRequest message, IMessageHandlerContext context)
    {
        await Execute(message, CancellationToken.None);
    }

    async Task<Unit> IRequestHandler<TRequest, Unit>.Execute(TRequest request, CancellationToken cancellationToken)
    {
        await Execute(request, cancellationToken);
        return Unit.Value;
    }
}
