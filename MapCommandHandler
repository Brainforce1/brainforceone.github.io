using Bvb.Framework.Contracts.Commands;

namespace Bvb.Framework.Server.Commands;

/// <summary>
/// Base class for a command handler without a response which only maps requests of different api versions
/// <see href="https://iris.bankvanbreda.be/display/AFDINF/Richtlijnen+ontwikkeling+in+FW+2.0">API versioning</see>
/// </summary>
/// <typeparam name="TOriginalRequest">The request in old version format</typeparam>
/// <typeparam name="TNewRequest">The request in new version format</typeparam>
/// <inheritdoc/>
public abstract class MapCommandHandler<TOriginalRequest, TNewRequest> : BaseCommandHandler<TOriginalRequest>
    where TOriginalRequest : ICommand 
    where TNewRequest : ICommand
{
    private readonly ICommandHandler<TNewRequest> _newCommand;

    protected MapCommandHandler(ICommandHandler<TNewRequest> newCommand)
    {
        _newCommand = newCommand;
    }

    public override async Task Execute(TOriginalRequest request, CancellationToken cancellationToken)
    {
        TNewRequest newRequest = MapIncomingRequest(request);
        await _newCommand.Execute(newRequest,cancellationToken);
    }

    /// <summary>
    /// Translate the original request <paramref name="request"/> of the old version to the request in the new version format
    /// </summary>
    /// <param name="request">Request for the command in old format</param>
    /// <returns>The request in new version format</returns>
    public abstract TNewRequest MapIncomingRequest(TOriginalRequest request);
}

/// <summary>
/// Base class for a command handler with a response which only maps requests of different api versions
/// <see href="https://iris.bankvanbreda.be/display/AFDINF/Richtlijnen+ontwikkeling+in+FW+2.0">API versioning</see>
/// </summary>
/// <typeparam name="TOriginalRequest">The request in old version format</typeparam>
/// <typeparam name="TOriginalResponse">The response in old version format</typeparam>
/// <typeparam name="TNewRequest">The request in new version format</typeparam>
/// <typeparam name="TNewResponse">The response in new version format</typeparam>
/// <inheritdoc/>
public abstract class MapCommandHandler<TOriginalRequest,TOriginalResponse, TNewRequest,TNewResponse> : BaseCommandHandler<TOriginalRequest,TOriginalResponse> 
    where TOriginalRequest : ICommand<TOriginalResponse> 
    where TNewRequest : ICommand<TNewResponse>
{
    private readonly ICommandHandler<TNewRequest,TNewResponse> _newCommand;

    protected MapCommandHandler(ICommandHandler<TNewRequest, TNewResponse> newCommand)
    {
        _newCommand = newCommand;
    }

    public override async Task<TOriginalResponse> Execute(TOriginalRequest request, CancellationToken cancellationToken)
    {
        TNewRequest newRequest = MapIncomingRequest(request);
        TNewResponse newResponse = await _newCommand.Execute(newRequest, cancellationToken);
        return MapOutgoingResponse(newResponse);
    }

    /// <summary>
    /// Translate the original request <paramref name="request"/> of the old version to the request in the new version format
    /// </summary>
    /// <param name="request">Request for the command in old format</param>
    /// <returns>The request in new version format</returns>
    public abstract TNewRequest MapIncomingRequest(TOriginalRequest request);

    /// <summary>
    /// Translate the response <paramref name="response"/> in the new version format to the old response version
    /// </summary>
    /// <param name="response">Response of the command in new format</param>
    /// <returns>The response in new version format</returns>
    public abstract TOriginalResponse MapOutgoingResponse(TNewResponse response);
}
